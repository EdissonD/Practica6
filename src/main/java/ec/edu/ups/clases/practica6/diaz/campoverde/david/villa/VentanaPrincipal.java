/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ec.edu.ups.clases.practica6.diaz.campoverde.david.villa;

import ec.edu.ups.clases.practica6.diaz.campoverde.david.villa.Controlador.ControladorArchivosYDirectorios;
import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeNode;

/**
 *
 * @author HP
 */
public class VentanaPrincipal extends javax.swing.JFrame {
    private ControladorArchivosYDirectorios controladorArchivosYDirectorios;
    /**
     * Creates new form VentanaPrincipal
     */
    public VentanaPrincipal() {
        initComponents();
        controladorArchivosYDirectorios = new ControladorArchivosYDirectorios();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jTextField = new javax.swing.JTextField();
        BTNListarDirectorios = new javax.swing.JButton();
        BTNListarDOcultos = new javax.swing.JButton();
        BTNListarAOcultos = new javax.swing.JButton();
        BTNListarArchivos = new javax.swing.JButton();
        BTNTodos = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree = new javax.swing.JTree();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea = new javax.swing.JTextArea();
        BTNMostrarInfo = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        MenuCrear = new javax.swing.JMenuItem();
        MenuEliminar = new javax.swing.JMenuItem();
        MenuRenombrar = new javax.swing.JMenuItem();
        MenuSalir = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 204, 102));

        jTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldActionPerformed(evt);
            }
        });

        BTNListarDirectorios.setText("Listar Directorios");
        BTNListarDirectorios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTNListarDirectoriosActionPerformed(evt);
            }
        });

        BTNListarDOcultos.setText("Listar Directorios Ocultos");
        BTNListarDOcultos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTNListarDOcultosActionPerformed(evt);
            }
        });

        BTNListarAOcultos.setText("Listar Archivos Ocultos");
        BTNListarAOcultos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTNListarAOcultosActionPerformed(evt);
            }
        });

        BTNListarArchivos.setText("Listar Archivos");
        BTNListarArchivos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTNListarArchivosActionPerformed(evt);
            }
        });

        BTNTodos.setText("Todos");
        BTNTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTNTodosActionPerformed(evt);
            }
        });

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("-");
        jTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jScrollPane1.setViewportView(jTree);

        jTextArea.setColumns(20);
        jTextArea.setRows(5);
        jScrollPane2.setViewportView(jTextArea);

        BTNMostrarInfo.setText("Mostrar Informaci√≥n");
        BTNMostrarInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTNMostrarInfoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(134, 134, 134)
                        .addComponent(BTNMostrarInfo)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(BTNListarDirectorios)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 406, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(BTNListarAOcultos)
                        .addGap(18, 18, 18)
                        .addComponent(BTNListarDOcultos)
                        .addGap(18, 18, 18)
                        .addComponent(BTNListarArchivos)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(BTNTodos)))
                .addGap(27, 27, 27))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BTNListarDirectorios, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BTNListarDOcultos, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BTNListarArchivos, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BTNListarAOcultos, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BTNTodos, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(BTNMostrarInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(30, Short.MAX_VALUE))
        );

        jMenu1.setText("Gestionar Directorio");

        MenuCrear.setText("Crear");
        MenuCrear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuCrearActionPerformed(evt);
            }
        });
        jMenu1.add(MenuCrear);

        MenuEliminar.setText("Eliminar");
        MenuEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuEliminarActionPerformed(evt);
            }
        });
        jMenu1.add(MenuEliminar);

        MenuRenombrar.setText("Renombrar");
        MenuRenombrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuRenombrarActionPerformed(evt);
            }
        });
        jMenu1.add(MenuRenombrar);

        MenuSalir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        MenuSalir.setText("Salir");
        jMenu1.add(MenuSalir);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void MenuEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuEliminarActionPerformed
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) jTree.getSelectionPath().getLastPathComponent();
        String rutaCompleta = obtenerRutaCompletaDesdeNodo(selectedNode);

        if (selectedNode.getAllowsChildren()) {
            int confirmacion = JOptionPane.showConfirmDialog(this, "¬øEst√°s seguro de eliminar el directorio y su contenido?", "Confirmar Eliminaci√≥n", JOptionPane.YES_NO_OPTION);

            if (confirmacion == JOptionPane.YES_OPTION) {
                try {
                    controladorArchivosYDirectorios.eliminarArchivoODirectorio(rutaCompleta);
                    DefaultMutableTreeNode parentNode = (DefaultMutableTreeNode) selectedNode.getParent();
                    actualizarTree(parentNode);
                    JOptionPane.showMessageDialog(this, "Directorio eliminado: " + rutaCompleta, "Directorio Eliminado", JOptionPane.INFORMATION_MESSAGE);
                } catch (IOException ex) {
                    Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } else {
            int confirmacion = JOptionPane.showConfirmDialog(this, "¬øEst√°s seguro de eliminar el archivo?", "Confirmar Eliminaci√≥n", JOptionPane.YES_NO_OPTION);

            if (confirmacion == JOptionPane.YES_OPTION) {
                try {
                    controladorArchivosYDirectorios.eliminarArchivoODirectorio(rutaCompleta);
                    DefaultMutableTreeNode parentNode = (DefaultMutableTreeNode) selectedNode.getParent();
                    actualizarTree(parentNode);
                    JOptionPane.showMessageDialog(this, "Archivo eliminado: " + rutaCompleta, "Archivo Eliminado", JOptionPane.INFORMATION_MESSAGE);
                } catch (IOException ex) {
                    Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_MenuEliminarActionPerformed

    private void jTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldActionPerformed

    private void BTNListarDirectoriosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTNListarDirectoriosActionPerformed
        if (jTextField.getText().isEmpty()) { // Si el campo de texto est√° vac√≠o
            JOptionPane.showMessageDialog(this, "No ha ingresado ningun path"); // Muestra un mensaje de di√°logo
        } else { // De lo contrario
            File archivo = new File(jTextField.getText()); // Crea un objeto File con la ruta ingresada
            if (archivo.exists()) { // Si el archivo existe
                String url = jTextField.getText(); // Obtiene la ruta ingresada
                DefaultMutableTreeNode raiz = new DefaultMutableTreeNode(url); // Crea un nodo ra√≠z para el modelo de √°rbol
                DefaultTreeModel treeModel = new DefaultTreeModel(raiz); // Crea un modelo de √°rbol con el nodo ra√≠z
                jTree.setModel(treeModel); // Establece el modelo de √°rbol en el componente treePruebas
                agregarCarpetasYArchivos(url, raiz, 1); // Agrega las carpetas y archivos en la ruta especificada al modelo de √°rbol
            } else { // Si el archivo no existe
                JOptionPane.showMessageDialog(this, "El archivo no existe");
            }
        }
    }//GEN-LAST:event_BTNListarDirectoriosActionPerformed

    private void MenuCrearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuCrearActionPerformed
        String ruta = jTextField.getText();
        if (ruta.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No se a√±adi√≥ una ruta", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            Object[] opciones = {"Directorio", "Archivo"};
            int seleccion = JOptionPane.showOptionDialog(this, "¬øQu√© desea crear en la ruta especificada?", "Crear", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, opciones, opciones[0]);
            if (seleccion == JOptionPane.YES_OPTION) {
                String nombreDirectorio = JOptionPane.showInputDialog(this, "Ingrese el nombre del directorio a crear:", "Crear Directorio", JOptionPane.PLAIN_MESSAGE);
                if (nombreDirectorio != null && !nombreDirectorio.isEmpty()) {
                    try {
                        controladorArchivosYDirectorios.crearDirectorio(ruta, nombreDirectorio);
                    } catch (IOException ex) {
                        Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    JOptionPane.showMessageDialog(this, "Directorio creado: " + nombreDirectorio, "Directorio Creado", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, "No se ingres√≥ un nombre de directorio v√°lido.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else if (seleccion == JOptionPane.NO_OPTION) {
                String nombreArchivo = JOptionPane.showInputDialog(this, "Ingrese el nombre del archivo a crear:", "Crear Archivo", JOptionPane.PLAIN_MESSAGE);
                if (nombreArchivo != null && !nombreArchivo.isEmpty()) {
                    controladorArchivosYDirectorios.crearArchivo(ruta, nombreArchivo);
                    JOptionPane.showMessageDialog(this, "Archivo creado: " + nombreArchivo, "Archivo Creado", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, "No se ingres√≥ un nombre de archivo v√°lido.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_MenuCrearActionPerformed

    private void BTNListarAOcultosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTNListarAOcultosActionPerformed
        if (jTextField.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "No ha ingresado ning√∫n Archivo Oculto");
        } else {
            File archivo = new File(jTextField.getText());
            if (archivo.exists()) {
                if (archivo.isFile()) {
                    String url = jTextField.getText();
                    DefaultMutableTreeNode raiz = new DefaultMutableTreeNode(url);
                    DefaultTreeModel treeModel = new DefaultTreeModel(raiz);
                    jTree.setModel(treeModel);
                    agregarCarpetasYArchivos(url, raiz, 4);
                } else if (archivo.isDirectory()) {
                    String url = jTextField.getText();
                    DefaultMutableTreeNode raiz = new DefaultMutableTreeNode(url);
                    DefaultTreeModel treeModel = new DefaultTreeModel(raiz);
                    jTree.setModel(treeModel);
                    agregarCarpetasYArchivos(url, raiz, 4);
                } else {
                    JOptionPane.showMessageDialog(this, "El archivo no existe");
                }
            } else {
                JOptionPane.showMessageDialog(this, "El archivo no existe");
            }
        }
    }//GEN-LAST:event_BTNListarAOcultosActionPerformed

    private void BTNListarDOcultosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTNListarDOcultosActionPerformed
        if (jTextField.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "No ha ingresado ning√∫n Directorio Oculto");
        } else {
            String url = jTextField.getText();
            File archivo = new File(url);
            if (archivo.exists()) {
                DefaultMutableTreeNode raiz = new DefaultMutableTreeNode(url);
                DefaultTreeModel treeModel = new DefaultTreeModel(raiz);
                jTree.setModel(treeModel);
                agregarCarpetasYArchivos(url, raiz, 3);
            } else {
                JOptionPane.showMessageDialog(this, "El archivo no existe");
            }
        }
    }//GEN-LAST:event_BTNListarDOcultosActionPerformed

    private void BTNListarArchivosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTNListarArchivosActionPerformed
        if (jTextField.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "No ha ingresado ning√∫na direccion del archivo");
        } else {
            File archivo = new File(jTextField.getText());
            if (archivo.exists() && archivo.isDirectory()) { // verifica si el archivo existe y es un directorio
                String url = archivo.getAbsolutePath(); // obtiene la ruta absoluta del directorio
                DefaultMutableTreeNode raiz = new DefaultMutableTreeNode(url);
                DefaultTreeModel treeModel = new DefaultTreeModel(raiz);
                jTree.setModel(treeModel);
                agregarCarpetasYArchivos(url, raiz, ERROR);
            } else {
                JOptionPane.showMessageDialog(this, "El archivo no existe o no es un directorio");
            }
        }
    }//GEN-LAST:event_BTNListarArchivosActionPerformed

    private void BTNTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTNTodosActionPerformed
        if (jTextField.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "No ha ingresado ning√∫n path");
        } else {
            File archivo = new File(jTextField.getText());
            if (archivo.exists() && archivo.isDirectory()) { // verifica si el archivo existe y es un directorio
                String url = archivo.getAbsolutePath(); // obtiene la ruta absoluta del directorio
                DefaultMutableTreeNode raiz = new DefaultMutableTreeNode(url);
                DefaultTreeModel treeModel = new DefaultTreeModel(raiz);
                jTree.setModel(treeModel);
                agregarCarpetasYArchivos(url, raiz, 0);
            } else {
                JOptionPane.showMessageDialog(this, "El archivo no existe o no es un directorio");
            }
        }
    }//GEN-LAST:event_BTNTodosActionPerformed

    private void BTNMostrarInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTNMostrarInfoActionPerformed
        if (jTree.getLastSelectedPathComponent() == null) {
            JOptionPane.showMessageDialog(this, "No se ha seleccionado ning√∫n archivo");
        } else {
            DefaultMutableTreeNode nodoSeleccionado = (DefaultMutableTreeNode) jTree.getLastSelectedPathComponent();

            TreeNode[] si = nodoSeleccionado.getPath();
            String path = "";
            for (TreeNode treeNode : si) {
                path = path + "/" + treeNode;
            }
            String pathF = path.substring(1);

            File archivo = new File(pathF);
            String infoArchivo = "Ruta: " + archivo.getAbsolutePath() + "\n"
                    + "Tama√±o: " + formatearTama√±oArchivo(archivo.length()) + "\n"
                    + "Permisos de lectura: " + (archivo.canRead() ? "Puede leer" : "No puede leer") + "\n"
                    + "Permisos de escritura: " + (archivo.canWrite() ? "Puede escribir" : "No puede escribir") + "\n"
                    + "√öltima modificaci√≥n: " + new SimpleDateFormat("dd-MM-yyyy").format(new Date(archivo.lastModified()));
            jTextArea.setText(infoArchivo);
        }
    }//GEN-LAST:event_BTNMostrarInfoActionPerformed

    private void MenuRenombrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuRenombrarActionPerformed
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) jTree.getSelectionPath().getLastPathComponent();
        if (selectedNode != null) {
            String nombreAnterior = selectedNode.toString();
            int confirmacion = JOptionPane.showConfirmDialog(null, "¬øEst√°s seguro de renombrar esto '" + nombreAnterior + "'?", "Confirmar Renombrar", JOptionPane.YES_NO_OPTION);
            if (confirmacion == JOptionPane.YES_OPTION) {
                String nuevoNombre = JOptionPane.showInputDialog(null, "Ingrese el nuevo nombre para '" + nombreAnterior + "':", "Renombrar", JOptionPane.PLAIN_MESSAGE);
                if (nuevoNombre != null && !nuevoNombre.isEmpty()) {
                    try {
                        controladorArchivosYDirectorios.renombrarArchivoODirectorio(nombreAnterior, nuevoNombre);
                    } catch (IOException ex) {
                        Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    selectedNode.setUserObject(nuevoNombre);
                    DefaultTreeModel treeModel = (DefaultTreeModel) jTree.getModel();
                    treeModel.nodeChanged(selectedNode);
                } else {
                    JOptionPane.showMessageDialog(null, "No se ingres√≥ un nombre v√°lido Escriba uno ", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_MenuRenombrarActionPerformed

    private void agregarCarpetasYArchivos(String ruta, DefaultMutableTreeNode nodoPadre, int opcion) {
        File archivo = new File(ruta);
        File[] elementos = archivo.listFiles();
        if (elementos != null) {
            for (File elemento : elementos) {
                if (opcion == 0) {
                    DefaultMutableTreeNode nodo = new DefaultMutableTreeNode(elemento.getName());
                    nodoPadre.add(nodo);

                    if (elemento.isDirectory()) {
                        agregarCarpetasYArchivos(elemento.getAbsolutePath(), nodo, 0);
                    }
                } else if (opcion == 1 && elemento.isDirectory()) {
                    DefaultMutableTreeNode nodo = new DefaultMutableTreeNode(elemento.getName());
                    nodoPadre.add(nodo);
                    agregarCarpetasYArchivos(elemento.getAbsolutePath(), nodo, 1);
                } else if (opcion == 2 && elemento.isFile()) {
                    DefaultMutableTreeNode nodo = new DefaultMutableTreeNode(elemento.getName());
                    nodoPadre.add(nodo);
                    agregarCarpetasYArchivos(elemento.getAbsolutePath(), nodo, 2);
                } else if (opcion == 3 && elemento.isDirectory() && elemento.isHidden()) {
                    DefaultMutableTreeNode nodo = new DefaultMutableTreeNode(elemento.getName());
                    nodoPadre.add(nodo);
                    agregarCarpetasYArchivos(elemento.getAbsolutePath(), nodo, 3);
                } else if (opcion == 4 && elemento.isFile() && elemento.isHidden()) {
                    DefaultMutableTreeNode nodo = new DefaultMutableTreeNode(elemento.getName());
                    nodoPadre.add(nodo);
                    agregarCarpetasYArchivos(elemento.getAbsolutePath(), nodo, 4);
                }
            }
        }
    }

    public String formatearTama√±oArchivo(long tama√±oEnBytes) {
        String[] unidades = {"bytes", "KB", "MB", "GB"};
        double tama√±o = tama√±oEnBytes;
        int indice = 0;
        while (tama√±o >= 1024 && indice < unidades.length - 1) {
            tama√±o /= 1024;
            indice++;
        }
        return formatearDecimal(tama√±o) + " " + unidades[indice];
    }

    public String formatearDecimal(double n√∫mero) {
        return String.format("%.2f", n√∫mero);
    }
 
    private String obtenerRutaCompletaDesdeNodo(DefaultMutableTreeNode node) {
        StringBuilder rutaCompleta = new StringBuilder();
        while (node != null) {
            Object userObject = node.getUserObject();
            if (userObject instanceof String) {
                String nombre = (String) userObject;
                rutaCompleta.insert(0, nombre);
                rutaCompleta.insert(0, SEPARADOR_RUTA);
            }
            node = (DefaultMutableTreeNode) node.getParent();
        }
        System.out.println(rutaCompleta.toString());
        return rutaCompleta.toString();
    }
    private static final String SEPARADOR_RUTA = "/";

    private void actualizarTree(DefaultMutableTreeNode parentNode) {
    DefaultTreeModel treeModel = (DefaultTreeModel) jTree.getModel();
    if (treeModel != null && parentNode != null) {
        treeModel.reload(parentNode);
    }
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BTNListarAOcultos;
    private javax.swing.JButton BTNListarArchivos;
    private javax.swing.JButton BTNListarDOcultos;
    private javax.swing.JButton BTNListarDirectorios;
    private javax.swing.JButton BTNMostrarInfo;
    private javax.swing.JButton BTNTodos;
    private javax.swing.JMenuItem MenuCrear;
    private javax.swing.JMenuItem MenuEliminar;
    private javax.swing.JMenuItem MenuRenombrar;
    private javax.swing.JMenuItem MenuSalir;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea;
    private javax.swing.JTextField jTextField;
    private javax.swing.JTree jTree;
    // End of variables declaration//GEN-END:variables
}
